// const webdriver = require("selenium-webdriver");
// var chrome = require("selenium-webdriver/chrome");
// // let cap = webdriver.Capabilities.chrome();
// // console.log(cap);
// // cap  ({chromeOptions: {mobileEmulation: {deviceName: 'NEXUS 6'}}})
// // let driver = new webdriver.Builder()
// //     .withCapabilities(cap)
// //     .build()
// let driver = new webdriver.Builder()
//   .forBrowser("chrome")
//   .setChromeOptions(
//     new chrome.Options().setMobileEmulation({ deviceName: "Nexus 5" })
//     // .addArguments('start-maximized')
//     // .addArguments('test-type')
//   )
//   .build();
// driver.get("https://www.rakuten-card.co.jp/e-navi/members/index.xhtml");

const webdriver = require("selenium-webdriver");
const { Builder, By, until } = webdriver;
const chrome = require("selenium-webdriver/chrome");

async function getDriverPath() {
  try {
    const selenium = require("selenium-download");
    // Driverをダウンロードするディレクトリを指定
    const path = __dirname + "/bin";
    // console.log(path);
    // # Driverのダウンロードとアップデート
    await selenium.ensure(path, (error) => {
      if (error) console.error(error.stack);
      // console.log('kita?');
    });
    // # ChromeDriverのパスを返す。
    return `${path}/chromedriver`;
  } catch (error) {
    throw error;
  }
}

async function initBrowserDriver(headless = true) {
  // # Driverのパスを取得する
  let driverPath = await getDriverPath();
  // console.log(`driver${driverPath}`);

  // # Driverのパスを渡す
  let service = new chrome.ServiceBuilder(driverPath).build();
  chrome.setDefaultService(service);
  // const chromeOptions = new chrome.Options();
  const chromeOptions = new chrome.Options().setMobileEmulation({
    deviceName: "Nexus 6",
  });
  return new Builder().forBrowser("chrome").setChromeOptions(chromeOptions).build();
}

// pointgetter(web),pointgetter(mobile),life-utility,pointgetter(mail)
// の4種で同じプログラム（入り口）を利用する。
// 起動時に、どのモードか分ける。
const MODE = { P_WEB: "P_WEB", P_MOB: "P_MOB", P_MIL: "P_MIL", L_UTL: "L_UTL" };
const db = require("./initter.js").db;
const log = require("log4js");
log.configure({
  appenders: {
    out: { type: "stdout" },
    app: { type: "file", filename: "application.log" },
  },
  categories: {
    default: { appenders: ["out", "app"], level: "debug" },
  },
});
const logger = log.getLogger();
logger.level = "all";
logger.info("Some info messages", "append", "more");

// log.Logger();
console.log(process.argv);
async function start(mode) {
  await db();
  switch (mode) {
    case MODE.P_WEB:
      break;
    case MODE.P_MOB:
      break;
    case MODE.P_MIL:
      break;
    case MODE.L_UTL:
      break;
    default:
  }
  // let driver = await initBrowserDriver();
  // driver.get("http://google.com/");
  // driver.quit();
  console.log("tyokuzen");
  process.exit();
}
start();

// モードの並列実行が可能か。可能ではない場合、終わりを検知できる必要があり、できない場合、起動タイミングは終了タイミングを予測し猶予する必要がある。
// プロセスに名前をつけて、チェック可能にし、終了するまで。もしくは、終了させてから実行するような仕組みにしたい。

// また、vaiosaito側では、DBから必要な情報を取得して、デスクトップにファイルを作成するみたいなシェルを作りたい。

// log書くやつとdriverとDBの読み書きは独立クラス
// logを表示するwebアプリを作る
